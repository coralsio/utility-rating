<?php

namespace Tests\Feature;

use Corals\Modules\Utility\Models\Rating;
use Corals\Settings\Facades\Modules;
use Corals\User\Models\User;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Support\Facades\Auth;
use Tests\TestCase;

class UtilityRatingTest extends TestCase
{
    use DatabaseTransactions;

    protected $rating = [];

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $usersRole = User::all();
        $users = [];
        foreach ($usersRole as $user) {
            if ($user->hasPermissionTo('Utility::rating.create') && $user->hasRole('member')) {
                $users[] = $user;
            }
        }
        Auth::loginUsingId($users[0]->id);
    }

    public function test_utility_rating_create()
    {
        $modules = [
            'Marketplace' => ['code' => 'corals-marketplace', 'prefix' => 'shop'],
            'Classified' => ['code' => 'corals-classified', 'prefix' => 'user'],
            'Ecommerce' => ['code' => 'corals-ecommerce', 'prefix' => 'shop'],
            'Entity' => ['code' => 'corals-entity', 'prefix' => 'entity/entry'],
            'Reservation' => ['code' => 'corals-reservation', 'prefix' => 'reservation'],
            'Directory' => ['code' => 'corals-directory', 'prefix' => 'user'],
        ];

        foreach ($modules as $module => $array) {
            if (Modules::isModuleActive($array['code'])) {
                $namespace = 'Corals\Modules\\' . $module . '\\Models';
                $myClasses = array_filter(get_declared_classes(), function ($item) use ($namespace) {
                    return substr($item, 0, strlen($namespace)) === $namespace;
                });

                foreach ($myClasses as $class) {
                    $traits = class_uses($class);
                    if (array_search('Corals\\Modules\\Utility\\Traits\\Rating\\ReviewRateable', $traits)) {
                        $model = $class::query()->first();
                        if ($model) {
                            $response = $this->post($array['prefix'] . '/' . $model->hashed_id . '/rate', [
                                'review_rating' => random_int(1, 5),
                                'review_subject' => 'good',
                                'review_text' => 'nice',]);

                            $this->rating = Rating::query()->first();

                            $response->assertStatus(200)->assertSeeText('Your review has been added successfully');
                        }
                    }
                }
            }
        }
        $this->assertFalse(false);
    }

    public function test_utility_rating_toggle_status()
    {
        if ($this->rating) {
            $response = $this->post('utilities/ratings/' . $this->rating->hashed_id . '/disapproved');

            $response->assertStatus(200)
                ->assertSeeText('Review status has been update successfully');
        }
        $this->assertTrue(true);
    }

    public function test_utility_rating_bulk_action()
    {
        $response = $this->post('utilities/ratings/bulk-action', [
            'action' => 'pending',]);


        $response->assertSeeText('message');
    }

    public function test_utility_rating_edit()
    {
        if ($this->rating) {
            $response = $this->get('utilities/ratings/' . $this->rating->hashed_id . '/edit');

            $response->assertStatus(200)->assertViewIs('utility-rating::create_edit');
        }
        $this->assertTrue(true);
    }

    public function test_utility_rating_update()
    {
        if ($this->rating) {
            $response = $this->put('utilities/ratings/' . $this->rating->hashed_id, [
                'review_rating' => 3,
                'review_subject' => 'good',
                'review_text' => 'nice',
                'status' => 'disapproved',]);


            $response->assertRedirect('utilities/ratings');
        }
        $this->assertTrue(true);
    }

    public function test_utility_rating_delete()
    {
        if ($this->rating) {
            $response = $this->delete('utilities/ratings/' . $this->rating->hashed_id);

            $response->assertStatus(200)->assertSeeText('Rating has been deleted successfully.');
            ;
        }
        $this->assertTrue(true);
    }
}
